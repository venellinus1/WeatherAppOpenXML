@page "/"
@inject WeatherService WeatherService
@inject WeatherExportService WeatherExportService
@inject IJSRuntime JS
@using WeatherAppOpenXML.Models
@rendermode InteractiveServer

<PageTitle>Weather Data</PageTitle>

<div class="container my-4">
    <h3 class="text-center mb-4">Weather Data for @weatherData?.Name</h3>


    <EditForm Model="@this" OnValidSubmit="ExportToFileClick">
        <div class="text-center mt-4">
            <div class="mb-3">
                <label for="cityInput" class="form-label">City</label>
                <InputText id="cityInput" class="form-control" @bind-Value="city"  />
                <ValidationMessage For="@(() => city)" />
            </div>

            <div class="d-flex justify-content-center align-items-center gap-2">
                <button type="button" class="btn btn-primary" @onclick="RefreshTable">Refresh Data</button>
                <button type="submit" class="btn btn-primary" id="hoverButton" disabled="@(!IsCityValid)">
                    Export to xlsx file
                </button>

                @if (!string.IsNullOrEmpty(downloadLink))
                {
                    <a href="@downloadLink" class="btn btn-success" download>Download exported file</a>
                }
            </div>

            <div class="w-100 d-block mt-3" style="height: 40px;">
                @if (isExporting)
                {
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Exporting...</span>
                    </div>
                }
            </div>
        </div>
    </EditForm>

    @if (weatherData != null)
    {
        <table class="table table-striped table-bordered mt-3">
            <thead class="table-dark">
                <tr>
                    <th scope="col">Property</th>
                    <th scope="col">Value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Coordinates</td>
                    <td>@($"{weatherData.Coord.Lat}, {weatherData.Coord.Lon}")</td>
                </tr>
                <tr>
                    <td>Weather</td>
                    <td>@(weatherData.Weather.FirstOrDefault()?.Main) - @(weatherData.Weather.FirstOrDefault()?.Description)</td>
                </tr>
                <tr>
                    <td>Temperature</td>
                    <td>@($"{weatherData.Main.Temp} °C (Feels like {weatherData.Main.Feels_like} °C)")</td>
                </tr>
                <tr>
                    <td>Temperature Range</td>
                    <td>@($"{weatherData.Main.Temp_min} °C to {weatherData.Main.Temp_max} °C")</td>
                </tr>
                <tr>
                    <td>Pressure</td>
                    <td>@($"{weatherData.Main.Pressure} hPa")</td>
                </tr>
                <tr>
                    <td>Humidity</td>
                    <td>@($"{weatherData.Main.Humidity}%")</td>
                </tr>
                <tr>
                    <td>Wind</td>
                    <td>@($"{weatherData.Wind.Speed} m/s at {weatherData.Wind.Deg}°")</td>
                </tr>
                <tr>
                    <td>Cloudiness</td>
                    <td>@($"{weatherData.Clouds.All}%")</td>
                </tr>
                <tr>
                    <td>Visibility</td>
                    <td>@($"{weatherData.Visibility} meters")</td>
                </tr>
                <tr>
                    <td>Country</td>
                    <td>@weatherData.Sys.Country</td>
                </tr>
                <tr>
                    <td>Sunrise</td>
                    <td>@(DateTimeOffset.FromUnixTimeSeconds(weatherData.Sys.Sunrise).ToLocalTime().ToString("HH:mm"))</td>
                </tr>
                <tr>
                    <td>Sunset</td>
                    <td>@(DateTimeOffset.FromUnixTimeSeconds(weatherData.Sys.Sunset).ToLocalTime().ToString("HH:mm"))</td>
                </tr>
            </tbody>
        </table>
    }
    else
    {
        <p class="text-center">Loading weather data...</p>
    }
    


</div>

@code {
    private WeatherData? weatherData;
    private string downloadLink;
    private bool isExporting = false;
    private string city = "Pleven";

    private bool IsCityValid => !string.IsNullOrEmpty(city) && city.All(char.IsLetter);


    protected override async Task OnInitializedAsync()
    {
        weatherData = await WeatherService.GetWeatherDataAsync("Pleven");        
    }

    private async Task ExportToFileClick()
    {
        if (!IsCityValid) return;

        isExporting = true;
        if (weatherData != null)
        {
            string fileName = await WeatherExportService.ExportToExcelAsync(weatherData);
            await Task.Delay(1000);
            downloadLink = $"/{fileName}";
        }

        isExporting = false;

        StateHasChanged();
    }

    private async Task RefreshTable()
    {
        if (IsCityValid)
        {
            weatherData = await WeatherService.GetWeatherDataAsync(city);
            downloadLink = "";
            StateHasChanged();
        }
    }
}
